package br.com.academia.controller;


import br.com.academia.model.Aluno;
import br.com.academia.model.Turma;
import br.com.academia.repository.AlunoRepository;

import br.com.academia.repository.AlunoRepositoryJPA;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

@CrossOrigin
@RestController // This means that this class is a Controller
@RequestMapping(path="/api/aluno") // This means URL's start with /demo (after Application path)
public class AlunoController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AlunoRepository alunoRepository;

    @Autowired
    private AlunoRepositoryJPA alunoRepositoryJPA;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewAluno (@RequestParam Aluno aluno) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        alunoRepository.save(aluno);
        return "Saved";
    }

    @GetMapping(path="/all", produces= MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Iterable<Aluno> getAllAlunos() {
        // This returns a JSON or XML with the users
        return alunoRepository.findAll();
    }

//    @GetMapping(path="/idAll", produces= MediaType.APPLICATION_JSON_VALUE)
//    public @ResponseBody Iterable<Turma> getTurmasByIdAluno(@RequestParam("id") long id) {
//        // This returns a JSON or XML with the users
//        return alunoRepositoryJPA.listaTurmaByIdAluno(id);
//    }

    @RequestMapping(value="/turmas/{id}", method=RequestMethod.GET)
    public @ResponseBody Iterable<Turma> getTurmasByIdAluno(@PathVariable(name = "id") long id) {
        Iterable<Turma> turmas = alunoRepositoryJPA.listaTurmaByIdAluno(id);
        turmas.forEach(turma -> {turma.setAlunos(null);});
        return turmas;
    }

}
